The constraints on the colours themsevles are very small (50). Can we leverage this in some way ? 

It turns out that we can. 

Let us represent i, by 2^i. In other words, every colour is represented by a binary string in which exactly 1 bit is set. 

----

It is clear that a segment is good if at most one character occurs an odd number of times. 

The reason we have chosen to represent the numbers as bitmasks is because it is very easy to check this with bitmasks. 

A segment [L, R] is good if XOR[L, R] has at most one bit set. 

In other words, we want to count the number of segments [L, R] where XOR[R]^XOR[L - 1] has at most one bit set. 

----


----
 
 void solve()
{
    int length;
    scanf("%d", &length);

    const int MAX_COLOUR = 50;
    vector <LL> colour(length + 1);
    for(int i = 1; i <= length; i++)
    {
        int x;
        scanf("%d", &x);

        colour[i] = (1LL << x);
    }

    LL good_segments = 0;
    LL prefix_xor = 0;
    map <LL, int> prefix_xor_frequency;

    prefix_xor_frequency[prefix_xor] = 1;

    for(int i = 1; i <= length; i++)
    {
        prefix_xor ^= colour[i];

        for(int c = 1; c <= MAX_COLOUR; c++)
        {
            LL standing_out_colour = (1LL << c);

            LL required_xor = prefix_xor^standing_out_colour;

            good_segments += prefix_xor_frequency[required_xor];
        }

        good_segments += prefix_xor_frequency[prefix_xor];

        prefix_xor_frequency[prefix_xor]++;
    }

    printf("%lld\n", good_segments);
}
